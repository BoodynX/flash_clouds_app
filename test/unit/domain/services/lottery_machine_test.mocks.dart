// Mocks generated by Mockito 5.0.17 from annotations
// in flash_clouds_app/test/unit/lottery_machine_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;

import 'package:flash_clouds_app/domain/entities/card_entity.dart' as _i4;
import 'package:flash_clouds_app/domain/repositories/i_cards_repository.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

/// A class which mocks [ICardsRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockICardsRepository extends _i1.Mock implements _i2.ICardsRepository {
  MockICardsRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i4.CardEntity?>> getAll() => (super.noSuchMethod(
          Invocation.method(#getAll, []),
          returnValue: Future<List<_i4.CardEntity?>>.value(<_i4.CardEntity?>[]))
      as _i3.Future<List<_i4.CardEntity?>>);
  @override
  _i3.Future<List<_i4.CardEntity?>> getAllSortByDate() => (super.noSuchMethod(
          Invocation.method(#getAllSortByDate, []),
          returnValue: Future<List<_i4.CardEntity?>>.value(<_i4.CardEntity?>[]))
      as _i3.Future<List<_i4.CardEntity?>>);
  @override
  _i3.Future<_i4.CardEntity?> getLatest() =>
      (super.noSuchMethod(Invocation.method(#getLatest, []),
              returnValue: Future<_i4.CardEntity?>.value())
          as _i3.Future<_i4.CardEntity?>);
  @override
  void save(_i4.CardEntity? card) =>
      super.noSuchMethod(Invocation.method(#save, [card]),
          returnValueForMissingStub: null);
  @override
  void delete(List<String>? id) =>
      super.noSuchMethod(Invocation.method(#delete, [id]),
          returnValueForMissingStub: null);
}
